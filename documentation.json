{
    "pipes": [],
    "interfaces": [
        {
            "name": "ExtendableElements",
            "id": "interface-ExtendableElements-51127f23be380814590cecae3edbb147",
            "file": "projects/ng-trust/src/lib/modules/extendable-menu/components/extendable-menu/extendable-menu.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  ViewChild,\n} from '@angular/core';\nimport anime, { AnimeAnimParams, AnimeTimelineInstance } from 'animejs';\n\ntype ExtensionState = 'MINIMIZED' | 'PREVIEW' | 'FULL';\n\ninterface ExtendableElements {\n  parentElement: HTMLElement;\n  wrapperElement: HTMLElement;\n  headerElement: HTMLElement;\n  contentElement: HTMLElement;\n}\n\ninterface PreviewConfiguration {\n  height: string;\n}\n\n@Component({\n  selector: 'trust-extendable-menu',\n  templateUrl: './extendable-menu.component.html',\n  styleUrls: ['./extendable-menu.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ExtendableMenuComponent implements AfterViewInit {\n  @ViewChild('wrapperEl') public wrapperEl!: ElementRef<HTMLElement>;\n  @ViewChild('headerEl') public headerEl!: ElementRef<HTMLElement>;\n  @ViewChild('contentEl') public contentEl!: ElementRef<HTMLElement>;\n\n  public get elements(): ExtendableElements {\n    const parentElement = this.wrapperEl.nativeElement.parentElement;\n\n    if (!parentElement) {\n      throw new Error('There is no parent element!');\n    }\n\n    return {\n      parentElement,\n      wrapperElement: this.wrapperEl.nativeElement,\n      headerElement: this.headerEl.nativeElement,\n      contentElement: this.contentEl.nativeElement,\n    };\n  }\n\n  @Input() public state: ExtensionState = 'PREVIEW';\n\n  @Input() public preview: PreviewConfiguration = {\n    height: '120px',\n  };\n\n  constructor() {}\n\n  public ngAfterViewInit(): void {\n    this.transitionFromPreviewToFull(false);\n  }\n\n  private changeStateToMinimized(immediately: boolean = false): void {\n    const {} = this.elements;\n  }\n\n  private transitionFromPreviewToFull(immediately: boolean = false): void {\n    const { parentElement, wrapperElement, headerElement, contentElement } =\n      this.elements;\n\n    headerElement.style.display = 'none';\n\n    const parentDOMRect = parentElement.getBoundingClientRect();\n    const wrapperDOMRect = wrapperElement.getBoundingClientRect();\n    const contentDOMRect = contentElement.getBoundingClientRect();\n\n    headerElement.style.display = 'block';\n\n    const headerDOMRect = headerElement.getBoundingClientRect();\n\n    wrapperElement.style.position = 'absolute';\n    wrapperElement.style.top = '0px';\n\n    const contentTopOffset =\n      contentDOMRect.top - headerDOMRect.height - parentDOMRect.top;\n\n    const timeline = anime.timeline({\n      duration: immediately ? 0 : 1000,\n      easing: 'easeOutQuad',\n    });\n\n    this.addToTimeline(timeline, {\n      targets: wrapperElement,\n    });\n\n    this.addToTimeline(timeline, {\n      targets: headerElement,\n      translateY: ['-100%', '0%'],\n    });\n\n    this.addToTimeline(timeline, {\n      targets: contentElement,\n      top: [`${contentTopOffset}px`, `0px`],\n    });\n  }\n\n  private transitionFromFullToPreview(immediately: boolean = false): void {\n    const { wrapperElement, headerElement, contentElement } = this.elements;\n\n    const headerDOMRect = headerElement.getBoundingClientRect();\n\n    const timeline = anime.timeline({\n      duration: immediately ? 0 : 5000,\n      easing: 'easeOutQuad',\n    });\n\n    this.addToTimeline(timeline, {\n      targets: wrapperElement,\n      height: ['600px', this.preview.height],\n    });\n\n    this.addToTimeline(timeline, {\n      targets: headerElement,\n      translateY: ['0%', '-100%'],\n    });\n\n    this.addToTimeline(timeline, {\n      targets: contentElement,\n      top: ['0px', `${headerDOMRect.height}px`],\n    });\n  }\n\n  private addToTimeline(\n    timeline: AnimeTimelineInstance,\n    params: AnimeAnimParams\n  ): void {\n    timeline.add(params, 0);\n  }\n\n  // public ngOnInit(): void {\n  //   const element = this.wrapperEl.nativeElement;\n  //   const rect = element.getBoundingClientRect();\n  //\n  //   const mouseup$ = fromEvent(window, 'mouseup');\n  //\n  //   let timeline: AnimeTimelineInstance | null = null;\n  //\n  //   let initialY: number | null = null;\n  //\n  //   let progress: number = 0;\n  //\n  //   fromEvent(element, 'mousedown')\n  //     .pipe(\n  //       tap((event) => (initialY = (event as MouseEvent).y)),\n  //       switchMap((event) =>\n  //         merge(\n  //           of(event),\n  //           fromEvent(window, 'mousemove').pipe(takeUntil(mouseup$)),\n  //           mouseup$\n  //         )\n  //       )\n  //     )\n  //     .subscribe((e) => {\n  //       const event = e as MouseEvent;\n  //       event.preventDefault();\n  //\n  //       if (event.type === 'mousedown') {\n  //         progress = timeline?.progress || 0;\n  //         timeline = null;\n  //         timeline = this.createTimeline();\n  //       }\n  //\n  //       const y = event.y - (initialY || 0);\n  //       const yPercentage = (y - rect.y) / 550;\n  //\n  //       const yWithProgress = Math.min(yPercentage + progress / 100, 1);\n  //\n  //       console.log(y, yPercentage, yWithProgress);\n  //\n  //       timeline?.seek(yWithProgress * 1000);\n  //       this.updateFunction(yWithProgress * 100);\n  //\n  //       if (event.type === 'mouseup') {\n  //         initialY = null;\n  //       }\n  //     });\n  //\n  //   anime({});\n  // }\n  //\n  // private createTimeline(duration: number = 1000): AnimeTimelineInstance {\n  //   const minimizedHeight = 30;\n  //   const previewHeight = 120;\n  //   const fullHeight = 600;\n  //\n  //   const minimizedDuration = (minimizedHeight / fullHeight) * duration;\n  //   const previewDuration = (previewHeight / fullHeight) * duration;\n  //   const fullDuration =\n  //     ((fullHeight - minimizedHeight - previewHeight) / fullHeight) * duration;\n  //\n  //   const wrapper = this.wrapperEl.nativeElement;\n  //   const header = wrapper.querySelector<HTMLElement>('[role=header]');\n  //   const content = wrapper.querySelector<HTMLElement>('[role=content]');\n  //\n  //   header!.style.display = 'block';\n  //   const headerDOMRect = header!.getBoundingClientRect();\n  //   header!.style.display = 'none';\n  //   const contentDOMRect = content!.getBoundingClientRect();\n  //   const parent = wrapper.parentElement;\n  //   const parentDOMRect = parent!.getBoundingClientRect();\n  //\n  //   const timeline = anime.timeline({\n  //     duration,\n  //     easing: 'linear',\n  //     autoplay: false,\n  //     update: (event) => this.updateFunction(event.progress),\n  //   });\n  //\n  //   timeline.add(\n  //     {\n  //       targets: wrapper,\n  //       top: [\n  //         {\n  //           duration: 0,\n  //         },\n  //         {\n  //           value: '0px',\n  //           delay: minimizedDuration + previewDuration,\n  //           duration: fullDuration,\n  //         },\n  //       ],\n  //     },\n  //     0\n  //   );\n  //\n  //   timeline.add(\n  //     {\n  //       targets: header,\n  //       translateY: [\n  //         {\n  //           value: '-100%',\n  //           duration: 0,\n  //         },\n  //         {\n  //           value: '0%',\n  //           duration: fullDuration,\n  //           delay: previewDuration + minimizedDuration,\n  //         },\n  //       ],\n  //     },\n  //     0\n  //   );\n  //\n  //   timeline.add(\n  //     {\n  //       targets: content,\n  //       top: [\n  //         {\n  //           value: '0px',\n  //           delay: minimizedDuration + previewDuration,\n  //         },\n  //         {\n  //           value:\n  //             contentDOMRect.top -\n  //             headerDOMRect.height -\n  //             parentDOMRect.top +\n  //             'px',\n  //           duration: 0,\n  //         },\n  //         {\n  //           value: '0px',\n  //           duration: fullDuration,\n  //         },\n  //       ],\n  //       height: [\n  //         {\n  //           value: '40px',\n  //           duration: 0,\n  //         },\n  //         {\n  //           value: '120px',\n  //           duration: minimizedDuration + previewDuration,\n  //         },\n  //         {\n  //           value: '600px',\n  //           duration: fullDuration,\n  //         },\n  //       ],\n  //     },\n  //     0\n  //   );\n  //\n  //   return timeline;\n  // }\n  //\n  // private updateFunction(progress: number): void {\n  //   console.log('progress', progress);\n  //\n  //   const wrapper = this.wrapperEl.nativeElement;\n  //   const header = wrapper.querySelector<HTMLElement>('[role=header]');\n  //\n  //   const duration = 1000;\n  //\n  //   const minimizedHeight = 30;\n  //   const previewHeight = 120;\n  //   const fullHeight = 600;\n  //\n  //   const minimizedDuration = (minimizedHeight / fullHeight) * duration;\n  //   const previewDuration = (previewHeight / fullHeight) * duration;\n  //\n  //   wrapper!.style.position =\n  //     (progress / 100) * duration > minimizedDuration + previewDuration\n  //       ? 'absolute'\n  //       : 'relative';\n  //\n  //   header!.style.display =\n  //     (progress / 100) * duration > minimizedDuration + previewDuration\n  //       ? 'block'\n  //       : 'none';\n  // }\n}\n",
            "properties": [
                {
                    "name": "contentElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "headerElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "parentElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "wrapperElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "PreviewConfiguration",
            "id": "interface-PreviewConfiguration-51127f23be380814590cecae3edbb147",
            "file": "projects/ng-trust/src/lib/modules/extendable-menu/components/extendable-menu/extendable-menu.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  ViewChild,\n} from '@angular/core';\nimport anime, { AnimeAnimParams, AnimeTimelineInstance } from 'animejs';\n\ntype ExtensionState = 'MINIMIZED' | 'PREVIEW' | 'FULL';\n\ninterface ExtendableElements {\n  parentElement: HTMLElement;\n  wrapperElement: HTMLElement;\n  headerElement: HTMLElement;\n  contentElement: HTMLElement;\n}\n\ninterface PreviewConfiguration {\n  height: string;\n}\n\n@Component({\n  selector: 'trust-extendable-menu',\n  templateUrl: './extendable-menu.component.html',\n  styleUrls: ['./extendable-menu.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ExtendableMenuComponent implements AfterViewInit {\n  @ViewChild('wrapperEl') public wrapperEl!: ElementRef<HTMLElement>;\n  @ViewChild('headerEl') public headerEl!: ElementRef<HTMLElement>;\n  @ViewChild('contentEl') public contentEl!: ElementRef<HTMLElement>;\n\n  public get elements(): ExtendableElements {\n    const parentElement = this.wrapperEl.nativeElement.parentElement;\n\n    if (!parentElement) {\n      throw new Error('There is no parent element!');\n    }\n\n    return {\n      parentElement,\n      wrapperElement: this.wrapperEl.nativeElement,\n      headerElement: this.headerEl.nativeElement,\n      contentElement: this.contentEl.nativeElement,\n    };\n  }\n\n  @Input() public state: ExtensionState = 'PREVIEW';\n\n  @Input() public preview: PreviewConfiguration = {\n    height: '120px',\n  };\n\n  constructor() {}\n\n  public ngAfterViewInit(): void {\n    this.transitionFromPreviewToFull(false);\n  }\n\n  private changeStateToMinimized(immediately: boolean = false): void {\n    const {} = this.elements;\n  }\n\n  private transitionFromPreviewToFull(immediately: boolean = false): void {\n    const { parentElement, wrapperElement, headerElement, contentElement } =\n      this.elements;\n\n    headerElement.style.display = 'none';\n\n    const parentDOMRect = parentElement.getBoundingClientRect();\n    const wrapperDOMRect = wrapperElement.getBoundingClientRect();\n    const contentDOMRect = contentElement.getBoundingClientRect();\n\n    headerElement.style.display = 'block';\n\n    const headerDOMRect = headerElement.getBoundingClientRect();\n\n    wrapperElement.style.position = 'absolute';\n    wrapperElement.style.top = '0px';\n\n    const contentTopOffset =\n      contentDOMRect.top - headerDOMRect.height - parentDOMRect.top;\n\n    const timeline = anime.timeline({\n      duration: immediately ? 0 : 1000,\n      easing: 'easeOutQuad',\n    });\n\n    this.addToTimeline(timeline, {\n      targets: wrapperElement,\n    });\n\n    this.addToTimeline(timeline, {\n      targets: headerElement,\n      translateY: ['-100%', '0%'],\n    });\n\n    this.addToTimeline(timeline, {\n      targets: contentElement,\n      top: [`${contentTopOffset}px`, `0px`],\n    });\n  }\n\n  private transitionFromFullToPreview(immediately: boolean = false): void {\n    const { wrapperElement, headerElement, contentElement } = this.elements;\n\n    const headerDOMRect = headerElement.getBoundingClientRect();\n\n    const timeline = anime.timeline({\n      duration: immediately ? 0 : 5000,\n      easing: 'easeOutQuad',\n    });\n\n    this.addToTimeline(timeline, {\n      targets: wrapperElement,\n      height: ['600px', this.preview.height],\n    });\n\n    this.addToTimeline(timeline, {\n      targets: headerElement,\n      translateY: ['0%', '-100%'],\n    });\n\n    this.addToTimeline(timeline, {\n      targets: contentElement,\n      top: ['0px', `${headerDOMRect.height}px`],\n    });\n  }\n\n  private addToTimeline(\n    timeline: AnimeTimelineInstance,\n    params: AnimeAnimParams\n  ): void {\n    timeline.add(params, 0);\n  }\n\n  // public ngOnInit(): void {\n  //   const element = this.wrapperEl.nativeElement;\n  //   const rect = element.getBoundingClientRect();\n  //\n  //   const mouseup$ = fromEvent(window, 'mouseup');\n  //\n  //   let timeline: AnimeTimelineInstance | null = null;\n  //\n  //   let initialY: number | null = null;\n  //\n  //   let progress: number = 0;\n  //\n  //   fromEvent(element, 'mousedown')\n  //     .pipe(\n  //       tap((event) => (initialY = (event as MouseEvent).y)),\n  //       switchMap((event) =>\n  //         merge(\n  //           of(event),\n  //           fromEvent(window, 'mousemove').pipe(takeUntil(mouseup$)),\n  //           mouseup$\n  //         )\n  //       )\n  //     )\n  //     .subscribe((e) => {\n  //       const event = e as MouseEvent;\n  //       event.preventDefault();\n  //\n  //       if (event.type === 'mousedown') {\n  //         progress = timeline?.progress || 0;\n  //         timeline = null;\n  //         timeline = this.createTimeline();\n  //       }\n  //\n  //       const y = event.y - (initialY || 0);\n  //       const yPercentage = (y - rect.y) / 550;\n  //\n  //       const yWithProgress = Math.min(yPercentage + progress / 100, 1);\n  //\n  //       console.log(y, yPercentage, yWithProgress);\n  //\n  //       timeline?.seek(yWithProgress * 1000);\n  //       this.updateFunction(yWithProgress * 100);\n  //\n  //       if (event.type === 'mouseup') {\n  //         initialY = null;\n  //       }\n  //     });\n  //\n  //   anime({});\n  // }\n  //\n  // private createTimeline(duration: number = 1000): AnimeTimelineInstance {\n  //   const minimizedHeight = 30;\n  //   const previewHeight = 120;\n  //   const fullHeight = 600;\n  //\n  //   const minimizedDuration = (minimizedHeight / fullHeight) * duration;\n  //   const previewDuration = (previewHeight / fullHeight) * duration;\n  //   const fullDuration =\n  //     ((fullHeight - minimizedHeight - previewHeight) / fullHeight) * duration;\n  //\n  //   const wrapper = this.wrapperEl.nativeElement;\n  //   const header = wrapper.querySelector<HTMLElement>('[role=header]');\n  //   const content = wrapper.querySelector<HTMLElement>('[role=content]');\n  //\n  //   header!.style.display = 'block';\n  //   const headerDOMRect = header!.getBoundingClientRect();\n  //   header!.style.display = 'none';\n  //   const contentDOMRect = content!.getBoundingClientRect();\n  //   const parent = wrapper.parentElement;\n  //   const parentDOMRect = parent!.getBoundingClientRect();\n  //\n  //   const timeline = anime.timeline({\n  //     duration,\n  //     easing: 'linear',\n  //     autoplay: false,\n  //     update: (event) => this.updateFunction(event.progress),\n  //   });\n  //\n  //   timeline.add(\n  //     {\n  //       targets: wrapper,\n  //       top: [\n  //         {\n  //           duration: 0,\n  //         },\n  //         {\n  //           value: '0px',\n  //           delay: minimizedDuration + previewDuration,\n  //           duration: fullDuration,\n  //         },\n  //       ],\n  //     },\n  //     0\n  //   );\n  //\n  //   timeline.add(\n  //     {\n  //       targets: header,\n  //       translateY: [\n  //         {\n  //           value: '-100%',\n  //           duration: 0,\n  //         },\n  //         {\n  //           value: '0%',\n  //           duration: fullDuration,\n  //           delay: previewDuration + minimizedDuration,\n  //         },\n  //       ],\n  //     },\n  //     0\n  //   );\n  //\n  //   timeline.add(\n  //     {\n  //       targets: content,\n  //       top: [\n  //         {\n  //           value: '0px',\n  //           delay: minimizedDuration + previewDuration,\n  //         },\n  //         {\n  //           value:\n  //             contentDOMRect.top -\n  //             headerDOMRect.height -\n  //             parentDOMRect.top +\n  //             'px',\n  //           duration: 0,\n  //         },\n  //         {\n  //           value: '0px',\n  //           duration: fullDuration,\n  //         },\n  //       ],\n  //       height: [\n  //         {\n  //           value: '40px',\n  //           duration: 0,\n  //         },\n  //         {\n  //           value: '120px',\n  //           duration: minimizedDuration + previewDuration,\n  //         },\n  //         {\n  //           value: '600px',\n  //           duration: fullDuration,\n  //         },\n  //       ],\n  //     },\n  //     0\n  //   );\n  //\n  //   return timeline;\n  // }\n  //\n  // private updateFunction(progress: number): void {\n  //   console.log('progress', progress);\n  //\n  //   const wrapper = this.wrapperEl.nativeElement;\n  //   const header = wrapper.querySelector<HTMLElement>('[role=header]');\n  //\n  //   const duration = 1000;\n  //\n  //   const minimizedHeight = 30;\n  //   const previewHeight = 120;\n  //   const fullHeight = 600;\n  //\n  //   const minimizedDuration = (minimizedHeight / fullHeight) * duration;\n  //   const previewDuration = (previewHeight / fullHeight) * duration;\n  //\n  //   wrapper!.style.position =\n  //     (progress / 100) * duration > minimizedDuration + previewDuration\n  //       ? 'absolute'\n  //       : 'relative';\n  //\n  //   header!.style.display =\n  //     (progress / 100) * duration > minimizedDuration + previewDuration\n  //       ? 'block'\n  //       : 'none';\n  // }\n}\n",
            "properties": [
                {
                    "name": "height",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "Test",
            "id": "interface-Test-42b6f9e491cd23ca40c696ffe046a118",
            "file": "projects/ng-trust/src/lib/ng-trust.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\n\ninterface Test {\n  xd: number;\n  test: string;\n}\n\n@Injectable()\nexport class NgTrustService {\n  private _testt = true;\n\n  constructor() {}\n\n  public test(): void {\n    const test = () => console.log('xd');\n  }\n\n  private xd(): void {}\n\n  public test2(): void {}\n}\n",
            "properties": [
                {
                    "name": "test",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "xd",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "ClassBinder",
            "id": "injectable-ClassBinder-05b3e64286dd63e3a8a5c22dfbeabe2f",
            "file": "projects/ng-trust/src/lib/public-services/class-binder/class-binder.service.ts",
            "properties": [
                {
                    "name": "_element",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        120,
                        142
                    ]
                }
            ],
            "methods": [
                {
                    "name": "bind",
                    "args": [
                        {
                            "name": "className",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "className",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "bindByBoolean",
                    "args": [
                        {
                            "name": "className",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "className",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hasClass",
                    "args": [
                        {
                            "name": "className",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "className",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "unbind",
                    "args": [
                        {
                            "name": "className",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "className",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { ElementRef, Injectable, Renderer2, SimpleChange } from '@angular/core';\nimport { WarningsUtils } from '../../utils';\n\n@Injectable()\nexport class ClassBinder {\n  private readonly _element: HTMLElement;\n\n  constructor(\n    elementRef: ElementRef<HTMLElement>,\n    private renderer: Renderer2\n  ) {\n    this._element = elementRef.nativeElement;\n  }\n\n  public bind(className: string): void {\n    if (this.hasClass(className)) {\n      WarningsUtils.ClassBinder.ClassIsAlreadyBound(className, this._element);\n      return;\n    }\n\n    this.renderer.addClass(this._element, className);\n  }\n\n  public unbind(className: string): void {\n    if (!this.hasClass(className)) {\n      WarningsUtils.ClassBinder.ClassIsNotBound(className, this._element);\n      return;\n    }\n\n    this.renderer.removeClass(this._element, className);\n  }\n\n  public bindByBoolean(className: string, state: boolean): void {\n    console.log(state);\n\n    state\n      ? !this.hasClass(className) && this.bind(className)\n      : this.hasClass(className) && this.unbind(className);\n  }\n\n  private hasClass(className: string): boolean {\n    return this._element.classList.contains(className);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef<HTMLElement>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef<HTMLElement>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "InteractionService",
            "id": "injectable-InteractionService-6618964549ab550e2b9e27a4f5202a1f",
            "file": "projects/ng-trust/src/lib/public-services/interaction/interaction.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "observeFocusIn",
                    "args": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "observeMouseOver",
                    "args": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { fromEvent, merge, Observable } from 'rxjs';\nimport { map, mapTo, startWith } from 'rxjs/operators';\n\n@Injectable()\nexport class InteractionService {\n  public observeFocusIn(element: HTMLElement): Observable<boolean> {\n    return merge(\n      fromEvent(element, 'focusin').pipe(mapTo(true)),\n      fromEvent(element, 'focusout').pipe(\n        map((event) => {\n          const focusEvent = event as FocusEvent;\n          const relatedTarget = focusEvent.relatedTarget as HTMLElement | null;\n\n          return element.contains(relatedTarget);\n        })\n      )\n    ).pipe(startWith(false));\n  }\n\n  public observeMouseOver(element: HTMLElement): Observable<boolean> {\n    return merge(\n      fromEvent(element, 'mouseenter').pipe(mapTo(true)),\n      fromEvent(element, 'mouseleave').pipe(mapTo(false))\n    ).pipe(startWith(false));\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "NgTrustService",
            "id": "injectable-NgTrustService-42b6f9e491cd23ca40c696ffe046a118",
            "file": "projects/ng-trust/src/lib/ng-trust.service.ts",
            "properties": [
                {
                    "name": "_testt",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methods": [
                {
                    "name": "test",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "test2",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "xd",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\ninterface Test {\n  xd: number;\n  test: string;\n}\n\n@Injectable()\nexport class NgTrustService {\n  private _testt = true;\n\n  constructor() {}\n\n  public test(): void {\n    const test = () => console.log('xd');\n  }\n\n  private xd(): void {}\n\n  public test2(): void {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "type": "injectable"
        },
        {
            "name": "TouchRecognizer",
            "id": "injectable-TouchRecognizer-c98f6c02e5da55453bd1c0339a78c9c2",
            "file": "projects/ng-trust/src/lib/modules/device/services/touch-recognizer.service.ts",
            "properties": [
                {
                    "name": "_touchScreen$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        120,
                        142
                    ]
                }
            ],
            "methods": [
                {
                    "name": "hasTouchScreen",
                    "args": [
                        {
                            "name": "window",
                            "type": "Window",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "window",
                            "type": "Window",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Inject, Injectable } from '@angular/core';\nimport { BehaviorSubject, fromEvent, Observable } from 'rxjs';\nimport { DOCUMENT } from '@angular/common';\nimport { DeviceModule } from '../device.module';\nimport { map, startWith } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: DeviceModule,\n})\nexport class TouchRecognizer {\n  public get touchScreen$(): Observable<boolean> {\n    return this._touchScreen$;\n  }\n\n  private readonly _touchScreen$: Observable<boolean>;\n\n  constructor(@Inject(DOCUMENT) private document: Document) {\n    const window = document.defaultView;\n\n    if (!window) {\n      this._touchScreen$ = new BehaviorSubject(false);\n      return;\n    }\n\n    this._touchScreen$ = fromEvent(window || null, 'resize').pipe(\n      startWith(this.hasTouchScreen(window)),\n      map(() => this.hasTouchScreen(window))\n    );\n  }\n\n  private hasTouchScreen(window: Window): boolean {\n    const navigator = window?.navigator;\n\n    if (!navigator) {\n      return false;\n    }\n\n    return navigator.maxTouchPoints > 0;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "document",
                        "type": "Document",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "document",
                        "type": "Document",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "touchScreen$": {
                    "name": "touchScreen$",
                    "getSignature": {
                        "name": "touchScreen$",
                        "type": "",
                        "returnType": "Observable<boolean>",
                        "line": 11
                    }
                }
            },
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "ClassBinderWarnings",
            "id": "class-ClassBinderWarnings-f1a1436525d0ed9a0d2995f7ab1c7c3d",
            "file": "projects/ng-trust/src/lib/utils/warnings-utils.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "class ClickEffectDirectiveWarnings {\n  public static ColorWasNotProvided(): void {\n    console.warn(\n      `Click effect will not work. You have to set up color of the effect!`\n    );\n  }\n}\n\nclass ClassBinderWarnings {\n  public static ClassIsAlreadyBound(\n    className: string,\n    element: HTMLElement\n  ): void {\n    console.warn(`Class .${className} is already bound to element ${element}!`);\n  }\n\n  public static ClassIsNotBound(className: string, element: HTMLElement): void {\n    console.warn(`${element} does not have class .${className}!`);\n  }\n}\n\nexport class WarningsUtils {\n  public static ClassBinder = ClassBinderWarnings;\n\n  public static ClickEffectDirective = ClickEffectDirectiveWarnings;\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "ClassIsAlreadyBound",
                    "args": [
                        {
                            "name": "className",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "className",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ClassIsNotBound",
                    "args": [
                        {
                            "name": "className",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "className",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ClickEffectDirectiveWarnings",
            "id": "class-ClickEffectDirectiveWarnings-f1a1436525d0ed9a0d2995f7ab1c7c3d",
            "file": "projects/ng-trust/src/lib/utils/warnings-utils.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "class ClickEffectDirectiveWarnings {\n  public static ColorWasNotProvided(): void {\n    console.warn(\n      `Click effect will not work. You have to set up color of the effect!`\n    );\n  }\n}\n\nclass ClassBinderWarnings {\n  public static ClassIsAlreadyBound(\n    className: string,\n    element: HTMLElement\n  ): void {\n    console.warn(`Class .${className} is already bound to element ${element}!`);\n  }\n\n  public static ClassIsNotBound(className: string, element: HTMLElement): void {\n    console.warn(`${element} does not have class .${className}!`);\n  }\n}\n\nexport class WarningsUtils {\n  public static ClassBinder = ClassBinderWarnings;\n\n  public static ClickEffectDirective = ClickEffectDirectiveWarnings;\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "ColorWasNotProvided",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 2,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "WarningsUtils",
            "id": "class-WarningsUtils-f1a1436525d0ed9a0d2995f7ab1c7c3d",
            "file": "projects/ng-trust/src/lib/utils/warnings-utils.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "class ClickEffectDirectiveWarnings {\n  public static ColorWasNotProvided(): void {\n    console.warn(\n      `Click effect will not work. You have to set up color of the effect!`\n    );\n  }\n}\n\nclass ClassBinderWarnings {\n  public static ClassIsAlreadyBound(\n    className: string,\n    element: HTMLElement\n  ): void {\n    console.warn(`Class .${className} is already bound to element ${element}!`);\n  }\n\n  public static ClassIsNotBound(className: string, element: HTMLElement): void {\n    console.warn(`${element} does not have class .${className}!`);\n  }\n}\n\nexport class WarningsUtils {\n  public static ClassBinder = ClassBinderWarnings;\n\n  public static ClickEffectDirective = ClickEffectDirectiveWarnings;\n}\n",
            "properties": [
                {
                    "name": "ClassBinder",
                    "defaultValue": "ClassBinderWarnings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ClickEffectDirective",
                    "defaultValue": "ClickEffectDirectiveWarnings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "ClickEffectDirective",
            "id": "directive-ClickEffectDirective-d4da84609c91f61620a729597b2e64c7",
            "file": "projects/ng-trust/src/lib/modules/click-effect/directives/click-effect.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  Directive,\n  ElementRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Renderer2,\n} from '@angular/core';\nimport { fromEvent, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport anime from 'animejs';\nimport { WarningsUtils } from '../../../utils';\n\n@Directive({\n  selector: '[trustClickEffect]',\n})\nexport class ClickEffectDirective implements OnInit, OnDestroy {\n  @Input() public trustClickEffectColor?: string;\n\n  private readonly _element: HTMLElement;\n\n  private readonly _completeSubject = new Subject<void>();\n\n  constructor(\n    elementRef: ElementRef<HTMLElement>,\n    private renderer: Renderer2\n  ) {\n    this._element = elementRef.nativeElement;\n  }\n\n  public ngOnInit(): void {\n    fromEvent(this._element, 'click')\n      .pipe(takeUntil(this._completeSubject))\n      .subscribe(() => {\n        const backgroundColor =\n          this.trustClickEffectColor ||\n          getComputedStyle(this._element).backgroundColor;\n\n        if (!backgroundColor) {\n          WarningsUtils.ClickEffectDirective.ColorWasNotProvided();\n          return;\n        }\n\n        const elementRect = this._element.getBoundingClientRect();\n        const size = Math.max(elementRect.height, elementRect.width);\n\n        const element = this.renderer.createElement('div');\n\n        const halfSize = `${size / 2}px`;\n\n        this.renderer.setStyle(element, 'width', halfSize);\n        this.renderer.setStyle(element, 'height', halfSize);\n\n        this.renderer.setStyle(element, 'left', `calc(50% - ${size / 4}px)`);\n        this.renderer.setStyle(element, 'top', `calc(50% - ${size / 4}px)`);\n\n        this.renderer.setStyle(element, 'position', 'absolute');\n        this.renderer.setStyle(element, 'border-radius', '50%');\n        this.renderer.setStyle(element, 'pointer-events', 'none');\n\n        this.renderer.setStyle(element, 'background-color', backgroundColor);\n\n        this.renderer.appendChild(this._element, element);\n\n        anime({\n          targets: element,\n          scale: ['1', '5'],\n          opacity: [0.25, 0],\n          easing: 'easeOutQuad',\n          duration: 500,\n          complete: () => {\n            this.renderer.removeChild(this._element, element);\n          },\n        });\n      });\n  }\n\n  public ngOnDestroy(): void {\n    this._completeSubject.next();\n    this._completeSubject.complete();\n  }\n}\n",
            "selector": "[trustClickEffect]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "trustClickEffectColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "_completeSubject",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        120,
                        142
                    ]
                },
                {
                    "name": "_element",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        120,
                        142
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef<HTMLElement>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef<HTMLElement>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-cef16a6f23c8f4ee36e3a4f554efb5d0",
            "file": "projects/ng-trust/src/lib/modules/button/components/button/button.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "ClassBinder"
                }
            ],
            "selector": "button[trust-button]",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "color",
                    "defaultValue": "'var(--palette-9)'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "string"
                },
                {
                    "name": "fill",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "bindMainColorCSSVariable",
                    "args": [
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Host,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Renderer2,\n  SimpleChanges,\n} from '@angular/core';\nimport { ClassBinder } from '../../../../public-services';\nimport { ClickEffectDirective } from '../../../click-effect/directives/click-effect.directive';\n\n@Component({\n  // eslint-disable-next-line @angular-eslint/component-selector\n  selector: 'button[trust-button]',\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [ClassBinder],\n  animations: [],\n})\nexport class ButtonComponent implements OnInit, OnChanges, OnDestroy {\n  @Input() public fill: boolean = true;\n  @Input() public color: string = 'var(--palette-9)';\n\n  constructor(\n    private classBinder: ClassBinder,\n    private elementRef: ElementRef<HTMLElement>,\n    private renderer: Renderer2,\n    @Host() @Optional() private clickEffect: ClickEffectDirective\n  ) {}\n\n  public ngOnInit(): void {\n    this.classBinder.bind('button');\n  }\n\n  public ngOnChanges({ fill, color }: SimpleChanges): void {\n    fill && this.classBinder.bindByBoolean('button--fill', fill.currentValue);\n    color && this.bindMainColorCSSVariable(color.currentValue);\n  }\n\n  public ngOnDestroy(): void {}\n\n  private bindMainColorCSSVariable(color: string): void {\n    const element = this.elementRef.nativeElement;\n    this.renderer.setStyle(element, '--main-color', color, 1);\n    this.clickEffect.trustClickEffectColor = color;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "$padding-x: 2.25rem;\r\n$padding-y: 1rem;\r\n$font-size: 1rem;\r\n\r\n:host.button {\r\n  /**\r\n  Style clear\r\n   */\r\n  display: inline-flex;\r\n  background: unset;\r\n  border: unset;\r\n  font-family: inherit;\r\n  color: inherit;\r\n  cursor: pointer;\r\n  position: relative;\r\n  font-weight: 500;\r\n  box-sizing: border-box;\r\n  line-height: 1;\r\n  align-items: center;\r\n  justify-content: center;\r\n\r\n  --main-color: var(--success-1);\r\n\r\n  border-radius: $padding-y + $font-size;\r\n  padding: $padding-y $padding-y;\r\n  font-size: $font-size;\r\n  min-height: $padding-y * 2 + $font-size;\r\n  min-width: $padding-y * 2 + $font-size;\r\n\r\n  &:not(.button--fill) {\r\n    $border-width: 0.125rem;\r\n\r\n    border: $border-width solid var(--main-color);\r\n    padding: ($padding-y - $border-width) ($padding-y - $border-width);\r\n    color: var(--main-color);\r\n  }\r\n\r\n  &--fill {\r\n    background-color: var(--main-color);\r\n    color: var(--palette-1);\r\n  }\r\n\r\n  &::before {\r\n    display: block;\r\n    content: '';\r\n    position: absolute;\r\n    left: 0;\r\n    top: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    border-radius: inherit;\r\n    box-shadow: 0 6px 12px var(--main-color);\r\n    opacity: 0;\r\n    transition-duration: 0.25s;\r\n  }\r\n\r\n  &:hover:before {\r\n    opacity: 0.5;\r\n  }\r\n}\r\n\r\n.button {\r\n  &__label {\r\n    padding: 0 $padding-x - $padding-y;\r\n\r\n    @media (min-width: 1200px) and (max-width: 1399px) {\r\n      padding: 0 $padding-x - $padding-y + 1rem;\r\n    }\r\n\r\n    @media (min-width: 1400px) {\r\n      padding: 2rem;\r\n    }\r\n  }\r\n\r\n  &__label:empty {\r\n    display: none !important;\r\n  }\r\n\r\n  &__icon {\r\n  }\r\n\r\n  &__icon > svg{\r\n    width: 1rem;\r\n    height: 1rem;\r\n    fill: currentColor;\r\n    display: block;\r\n    transform: scale(2);\r\n  }\r\n}\r\n\r\n",
                    "styleUrl": "./button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "classBinder",
                        "type": "ClassBinder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "elementRef",
                        "type": "ElementRef<HTMLElement>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "clickEffect",
                        "type": "ClickEffectDirective",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "classBinder",
                        "type": "ClassBinder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "elementRef",
                        "type": "ElementRef<HTMLElement>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "clickEffect",
                        "type": "ClickEffectDirective",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnChanges",
                "OnDestroy"
            ],
            "templateData": "<div class=\"button__label\"><ng-content></ng-content></div>\n<div class=\"button__icon\">\n  <svg id=\"Layer_1\" enable-background=\"new 0 0 128 128\" height=\"512\" viewBox=\"0 0 128 128\" width=\"512\" xmlns=\"http://www.w3.org/2000/svg\"><g><path d=\"m98.4 27.7c-12.6-12.7-33.1-12.7-45.8 0-11 11-12.6 28.2-3.9 41.1l-5.6 5.6c-2.8-.3-5.6.8-7.6 2.8l-15.8 15.6c-3.7 3.7-3.7 9.8 0 13.6s9.8 3.7 13.6 0l15.7-15.7c2-2 3-4.8 2.8-7.6l5.6-5.6c14.8 10.1 35 6.2 45-8.6 8.7-12.9 7.1-30.2-4-41.2zm-51.5 47.8 3.9-3.9c1.2 1.4 2.3 2.5 3.7 3.7l-3.9 3.9c-.8-1.5-2.1-2.8-3.7-3.7zm-.3 12.7-15.7 15.7c-2.4 2.4-6.2 2.4-8.6 0s-2.4-6.2 0-8.6l15.7-15.7c2.2-2.2 5.8-2.4 8.2-.3 2.7 2.2 2.9 6.4.4 8.9zm49.4-17.1c-10.2 10.1-26.2 11.3-37.8 2.7-2.2-1.7-4.2-3.6-5.9-5.9-9.6-12.8-6.9-30.9 5.9-40.5s30.9-6.9 40.5 5.9c8.6 11.5 7.4 27.6-2.7 37.8z\"/><path d=\"m92.5 33.6c-9.4-9.4-24.7-9.4-34.1 0s-9.4 24.7 0 34.1 24.7 9.4 34.1 0c4.5-4.5 7.1-10.6 7.1-17 0-6.5-2.5-12.6-7.1-17.1zm-2.4 31.6c-8 8-21.1 8-29.1 0s-8-21.1 0-29.1 21.1-8 29.1 0c3.9 3.9 6 9.1 6 14.6 0 5.4-2.2 10.6-6 14.5z\"/></g></svg></div>\n"
        },
        {
            "name": "ExtendableMenuComponent",
            "id": "component-ExtendableMenuComponent-51127f23be380814590cecae3edbb147",
            "file": "projects/ng-trust/src/lib/modules/extendable-menu/components/extendable-menu/extendable-menu.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "trust-extendable-menu",
            "styleUrls": [
                "./extendable-menu.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./extendable-menu.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "preview",
                    "defaultValue": "{\n    height: '120px',\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52,
                    "type": "PreviewConfiguration"
                },
                {
                    "name": "state",
                    "defaultValue": "'PREVIEW'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "ExtensionState"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "contentEl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLElement>",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'contentEl'"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "headerEl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLElement>",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'headerEl'"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "wrapperEl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLElement>",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'wrapperEl'"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addToTimeline",
                    "args": [
                        {
                            "name": "timeline",
                            "type": "AnimeTimelineInstance",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "params",
                            "type": "AnimeAnimParams",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 132,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "timeline",
                            "type": "AnimeTimelineInstance",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "AnimeAnimParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changeStateToMinimized",
                    "args": [
                        {
                            "name": "immediately",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "immediately",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "transitionFromFullToPreview",
                    "args": [
                        {
                            "name": "immediately",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "immediately",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "transitionFromPreviewToFull",
                    "args": [
                        {
                            "name": "immediately",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "immediately",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  ViewChild,\n} from '@angular/core';\nimport anime, { AnimeAnimParams, AnimeTimelineInstance } from 'animejs';\n\ntype ExtensionState = 'MINIMIZED' | 'PREVIEW' | 'FULL';\n\ninterface ExtendableElements {\n  parentElement: HTMLElement;\n  wrapperElement: HTMLElement;\n  headerElement: HTMLElement;\n  contentElement: HTMLElement;\n}\n\ninterface PreviewConfiguration {\n  height: string;\n}\n\n@Component({\n  selector: 'trust-extendable-menu',\n  templateUrl: './extendable-menu.component.html',\n  styleUrls: ['./extendable-menu.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ExtendableMenuComponent implements AfterViewInit {\n  @ViewChild('wrapperEl') public wrapperEl!: ElementRef<HTMLElement>;\n  @ViewChild('headerEl') public headerEl!: ElementRef<HTMLElement>;\n  @ViewChild('contentEl') public contentEl!: ElementRef<HTMLElement>;\n\n  public get elements(): ExtendableElements {\n    const parentElement = this.wrapperEl.nativeElement.parentElement;\n\n    if (!parentElement) {\n      throw new Error('There is no parent element!');\n    }\n\n    return {\n      parentElement,\n      wrapperElement: this.wrapperEl.nativeElement,\n      headerElement: this.headerEl.nativeElement,\n      contentElement: this.contentEl.nativeElement,\n    };\n  }\n\n  @Input() public state: ExtensionState = 'PREVIEW';\n\n  @Input() public preview: PreviewConfiguration = {\n    height: '120px',\n  };\n\n  constructor() {}\n\n  public ngAfterViewInit(): void {\n    this.transitionFromPreviewToFull(false);\n  }\n\n  private changeStateToMinimized(immediately: boolean = false): void {\n    const {} = this.elements;\n  }\n\n  private transitionFromPreviewToFull(immediately: boolean = false): void {\n    const { parentElement, wrapperElement, headerElement, contentElement } =\n      this.elements;\n\n    headerElement.style.display = 'none';\n\n    const parentDOMRect = parentElement.getBoundingClientRect();\n    const wrapperDOMRect = wrapperElement.getBoundingClientRect();\n    const contentDOMRect = contentElement.getBoundingClientRect();\n\n    headerElement.style.display = 'block';\n\n    const headerDOMRect = headerElement.getBoundingClientRect();\n\n    wrapperElement.style.position = 'absolute';\n    wrapperElement.style.top = '0px';\n\n    const contentTopOffset =\n      contentDOMRect.top - headerDOMRect.height - parentDOMRect.top;\n\n    const timeline = anime.timeline({\n      duration: immediately ? 0 : 1000,\n      easing: 'easeOutQuad',\n    });\n\n    this.addToTimeline(timeline, {\n      targets: wrapperElement,\n    });\n\n    this.addToTimeline(timeline, {\n      targets: headerElement,\n      translateY: ['-100%', '0%'],\n    });\n\n    this.addToTimeline(timeline, {\n      targets: contentElement,\n      top: [`${contentTopOffset}px`, `0px`],\n    });\n  }\n\n  private transitionFromFullToPreview(immediately: boolean = false): void {\n    const { wrapperElement, headerElement, contentElement } = this.elements;\n\n    const headerDOMRect = headerElement.getBoundingClientRect();\n\n    const timeline = anime.timeline({\n      duration: immediately ? 0 : 5000,\n      easing: 'easeOutQuad',\n    });\n\n    this.addToTimeline(timeline, {\n      targets: wrapperElement,\n      height: ['600px', this.preview.height],\n    });\n\n    this.addToTimeline(timeline, {\n      targets: headerElement,\n      translateY: ['0%', '-100%'],\n    });\n\n    this.addToTimeline(timeline, {\n      targets: contentElement,\n      top: ['0px', `${headerDOMRect.height}px`],\n    });\n  }\n\n  private addToTimeline(\n    timeline: AnimeTimelineInstance,\n    params: AnimeAnimParams\n  ): void {\n    timeline.add(params, 0);\n  }\n\n  // public ngOnInit(): void {\n  //   const element = this.wrapperEl.nativeElement;\n  //   const rect = element.getBoundingClientRect();\n  //\n  //   const mouseup$ = fromEvent(window, 'mouseup');\n  //\n  //   let timeline: AnimeTimelineInstance | null = null;\n  //\n  //   let initialY: number | null = null;\n  //\n  //   let progress: number = 0;\n  //\n  //   fromEvent(element, 'mousedown')\n  //     .pipe(\n  //       tap((event) => (initialY = (event as MouseEvent).y)),\n  //       switchMap((event) =>\n  //         merge(\n  //           of(event),\n  //           fromEvent(window, 'mousemove').pipe(takeUntil(mouseup$)),\n  //           mouseup$\n  //         )\n  //       )\n  //     )\n  //     .subscribe((e) => {\n  //       const event = e as MouseEvent;\n  //       event.preventDefault();\n  //\n  //       if (event.type === 'mousedown') {\n  //         progress = timeline?.progress || 0;\n  //         timeline = null;\n  //         timeline = this.createTimeline();\n  //       }\n  //\n  //       const y = event.y - (initialY || 0);\n  //       const yPercentage = (y - rect.y) / 550;\n  //\n  //       const yWithProgress = Math.min(yPercentage + progress / 100, 1);\n  //\n  //       console.log(y, yPercentage, yWithProgress);\n  //\n  //       timeline?.seek(yWithProgress * 1000);\n  //       this.updateFunction(yWithProgress * 100);\n  //\n  //       if (event.type === 'mouseup') {\n  //         initialY = null;\n  //       }\n  //     });\n  //\n  //   anime({});\n  // }\n  //\n  // private createTimeline(duration: number = 1000): AnimeTimelineInstance {\n  //   const minimizedHeight = 30;\n  //   const previewHeight = 120;\n  //   const fullHeight = 600;\n  //\n  //   const minimizedDuration = (minimizedHeight / fullHeight) * duration;\n  //   const previewDuration = (previewHeight / fullHeight) * duration;\n  //   const fullDuration =\n  //     ((fullHeight - minimizedHeight - previewHeight) / fullHeight) * duration;\n  //\n  //   const wrapper = this.wrapperEl.nativeElement;\n  //   const header = wrapper.querySelector<HTMLElement>('[role=header]');\n  //   const content = wrapper.querySelector<HTMLElement>('[role=content]');\n  //\n  //   header!.style.display = 'block';\n  //   const headerDOMRect = header!.getBoundingClientRect();\n  //   header!.style.display = 'none';\n  //   const contentDOMRect = content!.getBoundingClientRect();\n  //   const parent = wrapper.parentElement;\n  //   const parentDOMRect = parent!.getBoundingClientRect();\n  //\n  //   const timeline = anime.timeline({\n  //     duration,\n  //     easing: 'linear',\n  //     autoplay: false,\n  //     update: (event) => this.updateFunction(event.progress),\n  //   });\n  //\n  //   timeline.add(\n  //     {\n  //       targets: wrapper,\n  //       top: [\n  //         {\n  //           duration: 0,\n  //         },\n  //         {\n  //           value: '0px',\n  //           delay: minimizedDuration + previewDuration,\n  //           duration: fullDuration,\n  //         },\n  //       ],\n  //     },\n  //     0\n  //   );\n  //\n  //   timeline.add(\n  //     {\n  //       targets: header,\n  //       translateY: [\n  //         {\n  //           value: '-100%',\n  //           duration: 0,\n  //         },\n  //         {\n  //           value: '0%',\n  //           duration: fullDuration,\n  //           delay: previewDuration + minimizedDuration,\n  //         },\n  //       ],\n  //     },\n  //     0\n  //   );\n  //\n  //   timeline.add(\n  //     {\n  //       targets: content,\n  //       top: [\n  //         {\n  //           value: '0px',\n  //           delay: minimizedDuration + previewDuration,\n  //         },\n  //         {\n  //           value:\n  //             contentDOMRect.top -\n  //             headerDOMRect.height -\n  //             parentDOMRect.top +\n  //             'px',\n  //           duration: 0,\n  //         },\n  //         {\n  //           value: '0px',\n  //           duration: fullDuration,\n  //         },\n  //       ],\n  //       height: [\n  //         {\n  //           value: '40px',\n  //           duration: 0,\n  //         },\n  //         {\n  //           value: '120px',\n  //           duration: minimizedDuration + previewDuration,\n  //         },\n  //         {\n  //           value: '600px',\n  //           duration: fullDuration,\n  //         },\n  //       ],\n  //     },\n  //     0\n  //   );\n  //\n  //   return timeline;\n  // }\n  //\n  // private updateFunction(progress: number): void {\n  //   console.log('progress', progress);\n  //\n  //   const wrapper = this.wrapperEl.nativeElement;\n  //   const header = wrapper.querySelector<HTMLElement>('[role=header]');\n  //\n  //   const duration = 1000;\n  //\n  //   const minimizedHeight = 30;\n  //   const previewHeight = 120;\n  //   const fullHeight = 600;\n  //\n  //   const minimizedDuration = (minimizedHeight / fullHeight) * duration;\n  //   const previewDuration = (previewHeight / fullHeight) * duration;\n  //\n  //   wrapper!.style.position =\n  //     (progress / 100) * duration > minimizedDuration + previewDuration\n  //       ? 'absolute'\n  //       : 'relative';\n  //\n  //   header!.style.display =\n  //     (progress / 100) * duration > minimizedDuration + previewDuration\n  //       ? 'block'\n  //       : 'none';\n  // }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "[role='wrapper'] {\n  display: block;\n  width: 320px;\n  height: 560px;\n  overflow: hidden;\n}\n\n:host {\n  position: relative;\n  display: block;\n  overflow: hidden;\n  min-height: 600px;\n}\n\n[role='header'] {\n  position: relative;\n  display: block;\n  width: 100%;\n  height: 70px;\n  opacity: 0.5;\n  background-color: red;\n}\n\n[role='content'] {\n  position: relative;\n  display: block;\n  overflow: hidden;\n  height: 100%;\n  transform-origin: bottom center;\n  background-color: green;\n}\n\n.xd {\n  display: block;\n  width: 320px;\n  height: 50px;\n  background-color: hotpink;\n}\n",
                    "styleUrl": "./extendable-menu.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 54
            },
            "implements": [
                "AfterViewInit"
            ],
            "accessors": {
                "elements": {
                    "name": "elements",
                    "getSignature": {
                        "name": "elements",
                        "type": "",
                        "returnType": "ExtendableElements",
                        "line": 35
                    }
                }
            },
            "templateData": "<div class=\"xd\"></div>\n<div #wrapperEl role=\"wrapper\">\n  <div #headerEl role=\"header\">\n    Test\n  </div>\n  <div #contentEl role=\"content\">\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin sodales molestie tincidunt. Etiam cursus velit non\n    ipsum pellentesque, a scelerisque quam vulputate. Mauris consequat diam et mi mollis gravida. Phasellus lorem sem,\n    lacinia eu mollis suscipit, malesuada vehicula ligula. Integer ut tincidunt magna.\n  </div>\n</div>\n"
        },
        {
            "name": "NgTrustComponent",
            "id": "component-NgTrustComponent-ec3e0ba3bbdc521e84f3cfee04ca7785",
            "file": "projects/ng-trust/src/lib/ng-trust.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-ng-trust",
            "styleUrls": [],
            "styles": [],
            "template": "<p>\n  ng-trust works!\n</p>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-ng-trust',\n  template: `\n    <p>\n      ng-trust works!\n    </p>\n  `,\n  styles: [\n  ]\n})\nexport class NgTrustComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 13
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "SideMenuComponent",
            "id": "component-SideMenuComponent-28e213239ffb4b4ad63408cedf031c2f",
            "file": "projects/ng-trust/src/lib/modules/side-menu/components/side-menu/side-menu.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "ClassBinder"
                },
                {
                    "name": "InteractionService"
                }
            ],
            "selector": "lib-side-menu",
            "styleUrls": [
                "./side-menu.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./side-menu.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_completeSubject",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 110,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "menuElementRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLElement>",
                    "optional": false,
                    "description": "",
                    "line": 104,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'menuEl', {static: true}"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "showFullMenu",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 108,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "touchScreen$",
                    "defaultValue": "this.touchRecognizer.touchScreen$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 106,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 140,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "observeFullMenuDisplay",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  OnDestroy,\n  OnInit,\n  Renderer2,\n  ViewChild,\n} from '@angular/core';\nimport { ClassBinder, InteractionService } from '../../../../public-services';\nimport { TouchRecognizer } from '../../../device/services/touch-recognizer.service';\nimport { combineLatest, Observable, Subject } from 'rxjs';\nimport { distinctUntilChanged, map, takeUntil } from 'rxjs/operators';\nimport {\n  animate,\n  animateChild,\n  group,\n  query,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n@Component({\n  selector: 'lib-side-menu',\n  templateUrl: './side-menu.component.html',\n  styleUrls: ['./side-menu.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [ClassBinder, InteractionService],\n  animations: [\n    trigger('menu', [\n      state(\n        'true',\n        style({\n          width: '200px',\n          paddingRight: '0px',\n        })\n      ),\n      state(\n        'false',\n        style({\n          width: '56px',\n        })\n      ),\n      transition('false => true', [\n        group([\n          query(\n            ':self',\n            animate('200ms', style({ width: '200px', paddingRight: '0px' }))\n          ),\n          query('@*', animateChild()),\n        ]),\n      ]),\n      transition('true => false', [\n        group([\n          query(\n            ':self',\n            animate('200ms', style({ width: '56px', paddingRight: '16px' }))\n          ),\n          query('@*', animateChild()),\n        ]),\n      ]),\n    ]),\n    trigger('menuItem', [\n      state(\n        'true',\n        style({\n          borderTopRightRadius: 0,\n          borderBottomRightRadius: 0,\n        })\n      ),\n      state(\n        'false',\n        style({\n          borderTopRightRadius: '16px',\n          borderBottomRightRadius: '16px',\n        })\n      ),\n      transition('* => *', animate('200ms')),\n    ]),\n    trigger('menuItemLabel', [\n      state(\n        'true',\n        style({\n          width: '100%',\n          opacity: 1,\n        })\n      ),\n      state(\n        'false',\n        style({\n          width: '0%',\n          opacity: 0,\n        })\n      ),\n      transition('* => *', animate('200ms')),\n    ]),\n  ],\n})\nexport class SideMenuComponent implements OnInit, OnDestroy {\n  @ViewChild('menuEl', { static: true })\n  public menuElementRef!: ElementRef<HTMLElement>;\n\n  public touchScreen$ = this.touchRecognizer.touchScreen$;\n\n  public showFullMenu = false;\n\n  private _completeSubject = new Subject<void>();\n\n  constructor(\n    private classBinder: ClassBinder,\n    private interaction: InteractionService,\n    private touchRecognizer: TouchRecognizer,\n    private changeDetector: ChangeDetectorRef,\n    private elementRef: ElementRef<HTMLElement>,\n    private renderer2: Renderer2\n  ) {}\n\n  public ngOnInit(): void {\n    this.classBinder.bind('side-menu');\n\n    this.touchScreen$.subscribe(() => {});\n\n    this.renderer2.setAttribute(\n      this.elementRef.nativeElement,\n      'role',\n      'side-menu'\n    );\n\n    this.observeFullMenuDisplay()\n      .pipe(takeUntil(this._completeSubject), distinctUntilChanged())\n      .subscribe((value) => {\n        this.showFullMenu = value;\n        this.changeDetector.markForCheck();\n      });\n  }\n\n  public ngOnDestroy(): void {\n    this._completeSubject.next();\n    this._completeSubject.complete();\n  }\n\n  private observeFullMenuDisplay(): Observable<boolean> {\n    return combineLatest([\n      this.interaction.observeMouseOver(this.menuElementRef.nativeElement),\n      this.interaction.observeFocusIn(this.menuElementRef.nativeElement),\n    ]).pipe(map(([focusIn, mouseOver]) => focusIn || mouseOver));\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import url('https://cdn-uicons.flaticon.com/uicons-regular-rounded/css/uicons-regular-rounded.css');\r\n\r\n:host.side-menu {\r\n\r\n}\r\n\r\n.side-menu {\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100vh;\r\n  width: 56px;\r\n  color: var(--palette-5);\r\n  background-color: var(--palette-9);\r\n  padding: 16px;\r\n}\r\n\r\n.menu-item {\r\n  display: flex;\r\n  height: 56px;\r\n  width: 100%;\r\n  justify-content: left;\r\n  align-items: center;\r\n  border-radius: 16px;\r\n  cursor: pointer;\r\n  transition: background-color 200ms ease-in-out;\r\n\r\n  &__icon-wrapper {\r\n    width: 56px;\r\n    height: 56px;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex-shrink: 0;\r\n  }\r\n\r\n\r\n  &__icon {\r\n    font-size: 20px;\r\n    line-height: 0;\r\n    display: inline-block;\r\n  }\r\n\r\n  &__text {\r\n    overflow: hidden;\r\n  }\r\n\r\n  &--active {\r\n    background-color: var(--palette-8);\r\n  }\r\n\r\n  &:not(:last-child) {\r\n    margin-bottom: 16px;\r\n  }\r\n\r\n  &:not(.menu-item--active) {\r\n    &:hover {\r\n      background-color: var(--palette-8);\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./side-menu.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "classBinder",
                        "type": "ClassBinder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "interaction",
                        "type": "InteractionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "touchRecognizer",
                        "type": "TouchRecognizer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "changeDetector",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "elementRef",
                        "type": "ElementRef<HTMLElement>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer2",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 110,
                "jsdoctags": [
                    {
                        "name": "classBinder",
                        "type": "ClassBinder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "interaction",
                        "type": "InteractionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "touchRecognizer",
                        "type": "TouchRecognizer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "changeDetector",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "elementRef",
                        "type": "ElementRef<HTMLElement>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer2",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "{{showFullMenu }}\n<div class=\"side-menu\" #menuEl [@menu]=\"showFullMenu\">\n  <div class=\"menu-item\" tabindex=\"0\" [@menuItem]=\"showFullMenu\">\n    <div class=\"menu-item__icon-wrapper\">\n      <i class=\"menu-item__icon fi-rr-backpack\"></i>\n    </div>\n    <div class=\"menu-item__text\" [@menuItemLabel]=\"showFullMenu\">\n      Kalendarz\n    </div>\n  </div>\n  <div class=\"menu-item menu-item--active menu-item--full\" tabindex=\"0\" [@menuItem]=\"showFullMenu\">\n    <div class=\"menu-item__icon-wrapper\">\n      <i class=\"menu-item__icon fi-rr-grid\"></i>\n    </div>\n    <div class=\"menu-item__text\" [@menuItemLabel]=\"showFullMenu\">\n      Użytkownicy\n    </div>\n  </div>\n  <div class=\"menu-item\" tabindex=\"0\" [@menuItem]=\"showFullMenu\">\n    <div class=\"menu-item__icon-wrapper\">\n      <i class=\"menu-item__icon fi-rr-layout-fluid\"></i>\n    </div>\n    <div class=\"menu-item__text\" [@menuItemLabel]=\"showFullMenu\">\n      Ustawienia\n    </div>\n  </div>\n</div>\n"
        }
    ],
    "modules": [
        {
            "name": "ButtonModule",
            "id": "module-ButtonModule-a479f30109172081325bdbc4b643719b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ng-trust/src/lib/modules/button/button.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ButtonComponent } from './components/button/button.component';\n\n@NgModule({\n  declarations: [ButtonComponent],\n  imports: [CommonModule],\n  exports: [ButtonComponent],\n})\nexport class ButtonModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ButtonComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ButtonComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ClickEffectModule",
            "id": "module-ClickEffectModule-04e703ac6e411f37a340db8cfbe32348",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ng-trust/src/lib/modules/click-effect/click-effect.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ClickEffectDirective } from './directives/click-effect.directive';\n\n@NgModule({\n  declarations: [ClickEffectDirective],\n  imports: [CommonModule],\n  exports: [ClickEffectDirective],\n})\nexport class ClickEffectModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ClickEffectDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ClickEffectDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DeviceModule",
            "id": "module-DeviceModule-c788212afc4201d8824ffb534ad198cb",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ng-trust/src/lib/modules/device/device.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  imports: [CommonModule],\n})\nexport class DeviceModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ExtendableMenuModule",
            "id": "module-ExtendableMenuModule-c79e1955b7143a010cbd9136acd32a72",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ng-trust/src/lib/modules/extendable-menu/extendable-menu.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ExtendableMenuComponent } from './components/extendable-menu/extendable-menu.component';\n\n\n\n@NgModule({\n  declarations: [\n    ExtendableMenuComponent\n  ],\n  imports: [\n    CommonModule\n  ]\n})\nexport class ExtendableMenuModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ExtendableMenuComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NgTrustModule",
            "id": "module-NgTrustModule-c5acc2df6a3645f219cf69d9f4960ef2",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ng-trust/src/lib/ng-trust.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { NgTrustComponent } from './ng-trust.component';\n\n\n\n@NgModule({\n  declarations: [\n    NgTrustComponent\n  ],\n  imports: [\n  ],\n  exports: [\n    NgTrustComponent\n  ]\n})\nexport class NgTrustModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NgTrustComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "NgTrustComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SideMenuModule",
            "id": "module-SideMenuModule-cd732fde10ef66e2d7a4cb2ed6416070",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ng-trust/src/lib/modules/side-menu/side-menu.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SideMenuComponent } from './components/side-menu/side-menu.component';\n\n@NgModule({\n  declarations: [SideMenuComponent],\n  imports: [CommonModule],\n  exports: [SideMenuComponent],\n})\nexport class SideMenuModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SideMenuComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SideMenuComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-trust/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/trust/extendable-menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "template.bind({})"
            },
            {
                "name": "primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/trust/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/trust/side-menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-trust/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/trust/extendable-menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ExtendableMenuComponent>",
                "defaultValue": "(\n  args: ExtendableMenuComponent\n) => ({\n  props: args,\n})"
            },
            {
                "name": "template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/trust/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ButtonComponent>",
                "defaultValue": "(args: ButtonComponent) => ({\n  props: args,\n  template: `\n    <button trust-button [fill]=\"fill\" [color]=\"color\" trustClickEffect>{{test}}</button>\n  `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/trust/side-menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<SideMenuComponent>",
                "defaultValue": "(args: SideMenuComponent) => ({\n  props: args,\n})"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "ExtensionState",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"MINIMIZED\" | \"PREVIEW\" | \"FULL\"",
                "file": "projects/ng-trust/src/lib/modules/extendable-menu/components/extendable-menu/extendable-menu.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "projects/ng-trust/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-trust/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-trust/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "stories/trust/extendable-menu.stories.ts": [
                {
                    "name": "primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/trust/extendable-menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "template.bind({})"
                },
                {
                    "name": "template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/trust/extendable-menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ExtendableMenuComponent>",
                    "defaultValue": "(\n  args: ExtendableMenuComponent\n) => ({\n  props: args,\n})"
                }
            ],
            "stories/trust/button.stories.ts": [
                {
                    "name": "primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/trust/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "template.bind({})"
                },
                {
                    "name": "template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/trust/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ButtonComponent>",
                    "defaultValue": "(args: ButtonComponent) => ({\n  props: args,\n  template: `\n    <button trust-button [fill]=\"fill\" [color]=\"color\" trustClickEffect>{{test}}</button>\n  `,\n})"
                }
            ],
            "stories/trust/side-menu.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/trust/side-menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/trust/side-menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<SideMenuComponent>",
                    "defaultValue": "(args: SideMenuComponent) => ({\n  props: args,\n})"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "projects/ng-trust/src/lib/modules/extendable-menu/components/extendable-menu/extendable-menu.component.ts": [
                {
                    "name": "ExtensionState",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"MINIMIZED\" | \"PREVIEW\" | \"FULL\"",
                    "file": "projects/ng-trust/src/lib/modules/extendable-menu/components/extendable-menu/extendable-menu.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "projects/ng-trust/src/lib/modules/button/components/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/ng-trust/src/lib/modules/click-effect/directives/click-effect.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ClickEffectDirective",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/ng-trust/src/lib/modules/device/services/touch-recognizer.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TouchRecognizer",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ng-trust/src/lib/modules/extendable-menu/components/extendable-menu/extendable-menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ExtendableMenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "projects/ng-trust/src/lib/modules/extendable-menu/components/extendable-menu/extendable-menu.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ExtendableElements",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ng-trust/src/lib/modules/extendable-menu/components/extendable-menu/extendable-menu.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PreviewConfiguration",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ng-trust/src/lib/modules/side-menu/components/side-menu/side-menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SideMenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/ng-trust/src/lib/ng-trust.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NgTrustComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ng-trust/src/lib/ng-trust.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "NgTrustService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ng-trust/src/lib/ng-trust.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Test",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ng-trust/src/lib/public-services/class-binder/class-binder.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ClassBinder",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/ng-trust/src/lib/public-services/interaction/interaction.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "InteractionService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ng-trust/src/lib/utils/warnings-utils.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ClassBinderWarnings",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ng-trust/src/lib/utils/warnings-utils.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ClickEffectDirectiveWarnings",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ng-trust/src/lib/utils/warnings-utils.ts",
                "type": "class",
                "linktype": "classe",
                "name": "WarningsUtils",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ng-trust/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-trust/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/trust/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/trust/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/trust/extendable-menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/trust/extendable-menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/trust/side-menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/trust/side-menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}